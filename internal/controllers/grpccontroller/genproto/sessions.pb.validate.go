// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: sessions.proto

package sessionsproto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateSessionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSessionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSessionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSessionRequestMultiError, or nil if none found.
func (m *CreateSessionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSessionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for IpAddress

	// no validation rules for DeviceInfo

	if all {
		switch v := interface{}(m.GetExpiredAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSessionRequestValidationError{
					field:  "ExpiredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSessionRequestValidationError{
					field:  "ExpiredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiredAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSessionRequestValidationError{
				field:  "ExpiredAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSessionRequestMultiError(errors)
	}

	return nil
}

// CreateSessionRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSessionRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSessionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSessionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSessionRequestMultiError) AllErrors() []error { return m }

// CreateSessionRequestValidationError is the validation error returned by
// CreateSessionRequest.Validate if the designated constraints aren't met.
type CreateSessionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSessionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSessionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSessionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSessionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSessionRequestValidationError) ErrorName() string {
	return "CreateSessionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSessionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSessionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSessionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSessionRequestValidationError{}

// Validate checks the field values on CreateSessionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSessionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSessionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSessionResponseMultiError, or nil if none found.
func (m *CreateSessionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSessionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSession()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSessionResponseValidationError{
					field:  "Session",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSessionResponseValidationError{
					field:  "Session",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSession()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSessionResponseValidationError{
				field:  "Session",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Message

	if len(errors) > 0 {
		return CreateSessionResponseMultiError(errors)
	}

	return nil
}

// CreateSessionResponseMultiError is an error wrapping multiple validation
// errors returned by CreateSessionResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateSessionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSessionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSessionResponseMultiError) AllErrors() []error { return m }

// CreateSessionResponseValidationError is the validation error returned by
// CreateSessionResponse.Validate if the designated constraints aren't met.
type CreateSessionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSessionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSessionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSessionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSessionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSessionResponseValidationError) ErrorName() string {
	return "CreateSessionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSessionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSessionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSessionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSessionResponseValidationError{}

// Validate checks the field values on SessionData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SessionData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SessionData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SessionDataMultiError, or
// nil if none found.
func (m *SessionData) ValidateAll() error {
	return m.validate(true)
}

func (m *SessionData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for IpAddress

	// no validation rules for DeviceInfo

	// no validation rules for IsActive

	if all {
		switch v := interface{}(m.GetExpiredAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SessionDataValidationError{
					field:  "ExpiredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SessionDataValidationError{
					field:  "ExpiredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiredAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SessionDataValidationError{
				field:  "ExpiredAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SessionDataValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SessionDataValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SessionDataValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SessionDataValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SessionDataValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SessionDataValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SessionDataMultiError(errors)
	}

	return nil
}

// SessionDataMultiError is an error wrapping multiple validation errors
// returned by SessionData.ValidateAll() if the designated constraints aren't met.
type SessionDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SessionDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SessionDataMultiError) AllErrors() []error { return m }

// SessionDataValidationError is the validation error returned by
// SessionData.Validate if the designated constraints aren't met.
type SessionDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SessionDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SessionDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SessionDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SessionDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SessionDataValidationError) ErrorName() string { return "SessionDataValidationError" }

// Error satisfies the builtin error interface
func (e SessionDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSessionData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SessionDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SessionDataValidationError{}

// Validate checks the field values on GetSessionByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSessionByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSessionByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSessionByIdRequestMultiError, or nil if none found.
func (m *GetSessionByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSessionByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetSessionByIdRequestMultiError(errors)
	}

	return nil
}

// GetSessionByIdRequestMultiError is an error wrapping multiple validation
// errors returned by GetSessionByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSessionByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSessionByIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSessionByIdRequestMultiError) AllErrors() []error { return m }

// GetSessionByIdRequestValidationError is the validation error returned by
// GetSessionByIdRequest.Validate if the designated constraints aren't met.
type GetSessionByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSessionByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSessionByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSessionByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSessionByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSessionByIdRequestValidationError) ErrorName() string {
	return "GetSessionByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSessionByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSessionByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSessionByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSessionByIdRequestValidationError{}

// Validate checks the field values on GetSessionByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSessionByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSessionByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSessionByIdResponseMultiError, or nil if none found.
func (m *GetSessionByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSessionByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSession()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSessionByIdResponseValidationError{
					field:  "Session",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSessionByIdResponseValidationError{
					field:  "Session",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSession()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSessionByIdResponseValidationError{
				field:  "Session",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Message

	if len(errors) > 0 {
		return GetSessionByIdResponseMultiError(errors)
	}

	return nil
}

// GetSessionByIdResponseMultiError is an error wrapping multiple validation
// errors returned by GetSessionByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSessionByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSessionByIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSessionByIdResponseMultiError) AllErrors() []error { return m }

// GetSessionByIdResponseValidationError is the validation error returned by
// GetSessionByIdResponse.Validate if the designated constraints aren't met.
type GetSessionByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSessionByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSessionByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSessionByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSessionByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSessionByIdResponseValidationError) ErrorName() string {
	return "GetSessionByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSessionByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSessionByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSessionByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSessionByIdResponseValidationError{}

// Validate checks the field values on GetSessionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSessionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSessionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSessionsRequestMultiError, or nil if none found.
func (m *GetSessionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSessionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if m.IpAddress != nil {
		// no validation rules for IpAddress
	}

	if m.DeviceInfo != nil {
		// no validation rules for DeviceInfo
	}

	if m.IsActive != nil {
		// no validation rules for IsActive
	}

	if m.ExpiredAfter != nil {

		if all {
			switch v := interface{}(m.GetExpiredAfter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSessionsRequestValidationError{
						field:  "ExpiredAfter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSessionsRequestValidationError{
						field:  "ExpiredAfter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExpiredAfter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSessionsRequestValidationError{
					field:  "ExpiredAfter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.ExpiredBefore != nil {

		if all {
			switch v := interface{}(m.GetExpiredBefore()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSessionsRequestValidationError{
						field:  "ExpiredBefore",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSessionsRequestValidationError{
						field:  "ExpiredBefore",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExpiredBefore()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSessionsRequestValidationError{
					field:  "ExpiredBefore",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSessionsRequestMultiError(errors)
	}

	return nil
}

// GetSessionsRequestMultiError is an error wrapping multiple validation errors
// returned by GetSessionsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSessionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSessionsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSessionsRequestMultiError) AllErrors() []error { return m }

// GetSessionsRequestValidationError is the validation error returned by
// GetSessionsRequest.Validate if the designated constraints aren't met.
type GetSessionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSessionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSessionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSessionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSessionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSessionsRequestValidationError) ErrorName() string {
	return "GetSessionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSessionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSessionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSessionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSessionsRequestValidationError{}

// Validate checks the field values on GetSessionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSessionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSessionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSessionsResponseMultiError, or nil if none found.
func (m *GetSessionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSessionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSessions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSessionsResponseValidationError{
						field:  fmt.Sprintf("Sessions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSessionsResponseValidationError{
						field:  fmt.Sprintf("Sessions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSessionsResponseValidationError{
					field:  fmt.Sprintf("Sessions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Message

	if len(errors) > 0 {
		return GetSessionsResponseMultiError(errors)
	}

	return nil
}

// GetSessionsResponseMultiError is an error wrapping multiple validation
// errors returned by GetSessionsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSessionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSessionsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSessionsResponseMultiError) AllErrors() []error { return m }

// GetSessionsResponseValidationError is the validation error returned by
// GetSessionsResponse.Validate if the designated constraints aren't met.
type GetSessionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSessionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSessionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSessionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSessionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSessionsResponseValidationError) ErrorName() string {
	return "GetSessionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSessionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSessionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSessionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSessionsResponseValidationError{}
